[
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "django.contrib.auth.models",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "AbstractUser",
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "isExtraImport": true,
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "django.contrib.auth.validators",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "django.contrib.auth.validators",
        "description": "django.contrib.auth.validators",
        "detail": "django.contrib.auth.validators",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "django.db.models.deletion",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "django.db.models.deletion",
        "description": "django.db.models.deletion",
        "detail": "django.db.models.deletion",
        "documentation": {}
    },
    {
        "label": "django.utils.timezone",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "django.utils.timezone",
        "description": "django.utils.timezone",
        "detail": "django.utils.timezone",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "database_sync_to_async",
        "importPath": "channels.db",
        "description": "channels.db",
        "isExtraImport": true,
        "detail": "channels.db",
        "documentation": {}
    },
    {
        "label": "AsyncWebsocketConsumer",
        "importPath": "channels.generic.websocket",
        "description": "channels.generic.websocket",
        "isExtraImport": true,
        "detail": "channels.generic.websocket",
        "documentation": {}
    },
    {
        "label": "sync_to_async",
        "importPath": "asgiref.sync",
        "description": "asgiref.sync",
        "isExtraImport": true,
        "detail": "asgiref.sync",
        "documentation": {}
    },
    {
        "label": "async_to_sync",
        "importPath": "asgiref.sync",
        "description": "asgiref.sync",
        "isExtraImport": true,
        "detail": "asgiref.sync",
        "documentation": {}
    },
    {
        "label": "json,",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "json.",
        "description": "json.",
        "detail": "json.",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "django.forms",
        "description": "django.forms",
        "isExtraImport": true,
        "detail": "django.forms",
        "documentation": {}
    },
    {
        "label": "UserCreationForm",
        "importPath": "django.contrib.auth.forms",
        "description": "django.contrib.auth.forms",
        "isExtraImport": true,
        "detail": "django.contrib.auth.forms",
        "documentation": {}
    },
    {
        "label": "AuthenticationForm",
        "importPath": "django.contrib.auth.forms",
        "description": "django.contrib.auth.forms",
        "isExtraImport": true,
        "detail": "django.contrib.auth.forms",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "reverse_lazy",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "include",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "random",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "random",
        "description": "random",
        "detail": "random",
        "documentation": {}
    },
    {
        "label": "socket",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "socket",
        "description": "socket",
        "detail": "socket",
        "documentation": {}
    },
    {
        "label": "string",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "string",
        "description": "string",
        "detail": "string",
        "documentation": {}
    },
    {
        "label": "render",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "redirect",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "HttpResponseRedirect",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "DetailView",
        "importPath": "django.views.generic",
        "description": "django.views.generic",
        "isExtraImport": true,
        "detail": "django.views.generic",
        "documentation": {}
    },
    {
        "label": "UpdateView",
        "importPath": "django.views.generic",
        "description": "django.views.generic",
        "isExtraImport": true,
        "detail": "django.views.generic",
        "documentation": {}
    },
    {
        "label": "DeleteView",
        "importPath": "django.views.generic",
        "description": "django.views.generic",
        "isExtraImport": true,
        "detail": "django.views.generic",
        "documentation": {}
    },
    {
        "label": "TemplateView",
        "importPath": "django.views.generic",
        "description": "django.views.generic",
        "isExtraImport": true,
        "detail": "django.views.generic",
        "documentation": {}
    },
    {
        "label": "ListView",
        "importPath": "django.views.generic",
        "description": "django.views.generic",
        "isExtraImport": true,
        "detail": "django.views.generic",
        "documentation": {}
    },
    {
        "label": "CreateView",
        "importPath": "django.views.generic",
        "description": "django.views.generic",
        "isExtraImport": true,
        "detail": "django.views.generic",
        "documentation": {}
    },
    {
        "label": "LoginView",
        "importPath": "django.contrib.auth.views",
        "description": "django.contrib.auth.views",
        "isExtraImport": true,
        "detail": "django.contrib.auth.views",
        "documentation": {}
    },
    {
        "label": "PasswordChangeView",
        "importPath": "django.contrib.auth.views",
        "description": "django.contrib.auth.views",
        "isExtraImport": true,
        "detail": "django.contrib.auth.views",
        "documentation": {}
    },
    {
        "label": "LogoutView",
        "importPath": "django.contrib.auth.views",
        "description": "django.contrib.auth.views",
        "isExtraImport": true,
        "detail": "django.contrib.auth.views",
        "documentation": {}
    },
    {
        "label": "login_required",
        "importPath": "django.contrib.auth.decorators",
        "description": "django.contrib.auth.decorators",
        "isExtraImport": true,
        "detail": "django.contrib.auth.decorators",
        "documentation": {}
    },
    {
        "label": "authenticate",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "login",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "EmailMessage",
        "importPath": "django.core.mail",
        "description": "django.core.mail",
        "isExtraImport": true,
        "detail": "django.core.mail",
        "documentation": {}
    },
    {
        "label": "check_password",
        "importPath": "django.contrib.auth.hashers",
        "description": "django.contrib.auth.hashers",
        "isExtraImport": true,
        "detail": "django.contrib.auth.hashers",
        "documentation": {}
    },
    {
        "label": "make_password",
        "importPath": "django.contrib.auth.hashers",
        "description": "django.contrib.auth.hashers",
        "isExtraImport": true,
        "detail": "django.contrib.auth.hashers",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "get_asgi_application",
        "importPath": "django.core.asgi",
        "description": "django.core.asgi",
        "isExtraImport": true,
        "detail": "django.core.asgi",
        "documentation": {}
    },
    {
        "label": "ProtocolTypeRouter",
        "importPath": "channels.routing",
        "description": "channels.routing",
        "isExtraImport": true,
        "detail": "channels.routing",
        "documentation": {}
    },
    {
        "label": "URLRouter",
        "importPath": "channels.routing",
        "description": "channels.routing",
        "isExtraImport": true,
        "detail": "channels.routing",
        "documentation": {}
    },
    {
        "label": "AuthMiddlewareStack",
        "importPath": "channels.auth",
        "description": "channels.auth",
        "isExtraImport": true,
        "detail": "channels.auth",
        "documentation": {}
    },
    {
        "label": "websocket_urlpatterns",
        "importPath": "KODBURG.routing",
        "description": "KODBURG.routing",
        "isExtraImport": true,
        "detail": "KODBURG.routing",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "static",
        "importPath": "django.conf.urls.static",
        "description": "django.conf.urls.static",
        "isExtraImport": true,
        "detail": "django.conf.urls.static",
        "documentation": {}
    },
    {
        "label": "get_wsgi_application",
        "importPath": "django.core.wsgi",
        "description": "django.core.wsgi",
        "isExtraImport": true,
        "detail": "django.core.wsgi",
        "documentation": {}
    },
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "KODBURG.migrations.0001_initial",
        "description": "KODBURG.migrations.0001_initial",
        "peekOfCode": "class Migration(migrations.Migration):\n    initial = True\n    dependencies = [\n        ('auth', '0012_alter_user_first_name_max_length'),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='Blog_list',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),",
        "detail": "KODBURG.migrations.0001_initial",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "KODBURG.migrations.0002_rename_message_messages",
        "description": "KODBURG.migrations.0002_rename_message_messages",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('KODBURG', '0001_initial'),\n    ]\n    operations = [\n        migrations.RenameModel(\n            old_name='Message',\n            new_name='Messages',\n        ),\n    ]",
        "detail": "KODBURG.migrations.0002_rename_message_messages",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "KODBURG.migrations.0003_room_time_create",
        "description": "KODBURG.migrations.0003_room_time_create",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('KODBURG', '0002_rename_message_messages'),\n    ]\n    operations = [\n        migrations.AddField(\n            model_name='room',\n            name='time_create',\n            field=models.DateTimeField(auto_now=True),\n        ),",
        "detail": "KODBURG.migrations.0003_room_time_create",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "KODBURG.migrations.0004_user_notice",
        "description": "KODBURG.migrations.0004_user_notice",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('KODBURG', '0003_room_time_create'),\n    ]\n    operations = [\n        migrations.AddField(\n            model_name='user',\n            name='notice',\n            field=models.ManyToManyField(blank=True, to='KODBURG.notice'),\n        ),",
        "detail": "KODBURG.migrations.0004_user_notice",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "KODBURG.migrations.0005_user_descriptions",
        "description": "KODBURG.migrations.0005_user_descriptions",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        (\"KODBURG\", \"0004_user_notice\"),\n    ]\n    operations = [\n        migrations.AddField(\n            model_name=\"user\",\n            name=\"descriptions\",\n            field=models.ManyToManyField(\n                blank=True, related_name=\"Descriptions\", to=settings.AUTH_USER_MODEL",
        "detail": "KODBURG.migrations.0005_user_descriptions",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "KODBURG.migrations.0006_user_chats",
        "description": "KODBURG.migrations.0006_user_chats",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        (\"KODBURG\", \"0005_user_descriptions\"),\n    ]\n    operations = [\n        migrations.AddField(\n            model_name=\"user\",\n            name=\"chats\",\n            field=models.ManyToManyField(blank=True, to=\"KODBURG.room\"),\n        ),",
        "detail": "KODBURG.migrations.0006_user_chats",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "KODBURG.migrations.0007_user_connected",
        "description": "KODBURG.migrations.0007_user_connected",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        (\"KODBURG\", \"0006_user_chats\"),\n    ]\n    operations = [\n        migrations.AddField(\n            model_name=\"user\",\n            name=\"connected\",\n            field=models.ManyToManyField(\n                blank=True, related_name=\"connect\", to=settings.AUTH_USER_MODEL",
        "detail": "KODBURG.migrations.0007_user_connected",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "KODBURG.migrations.0008_remove_user_connected_user_connected_from_and_more",
        "description": "KODBURG.migrations.0008_remove_user_connected_user_connected_from_and_more",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        (\"KODBURG\", \"0007_user_connected\"),\n    ]\n    operations = [\n        migrations.RemoveField(\n            model_name=\"user\",\n            name=\"connected\",\n        ),\n        migrations.AddField(",
        "detail": "KODBURG.migrations.0008_remove_user_connected_user_connected_from_and_more",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "KODBURG.migrations.0009_remove_user_connected_from_remove_user_connected_to_and_more",
        "description": "KODBURG.migrations.0009_remove_user_connected_from_remove_user_connected_to_and_more",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        (\"KODBURG\", \"0008_remove_user_connected_user_connected_from_and_more\"),\n    ]\n    operations = [\n        migrations.RemoveField(\n            model_name=\"user\",\n            name=\"connected_from\",\n        ),\n        migrations.RemoveField(",
        "detail": "KODBURG.migrations.0009_remove_user_connected_from_remove_user_connected_to_and_more",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "KODBURG.migrations.0010_requests_onl_from_requests_onl_to",
        "description": "KODBURG.migrations.0010_requests_onl_from_requests_onl_to",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        (\n            \"KODBURG\",\n            \"0009_remove_user_connected_from_remove_user_connected_to_and_more\",\n        ),\n    ]\n    operations = [\n        migrations.AddField(\n            model_name=\"requests\",",
        "detail": "KODBURG.migrations.0010_requests_onl_from_requests_onl_to",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "KODBURG.migrations.0011_user_connections",
        "description": "KODBURG.migrations.0011_user_connections",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        (\"KODBURG\", \"0010_requests_onl_from_requests_onl_to\"),\n    ]\n    operations = [\n        migrations.AddField(\n            model_name=\"user\",\n            name=\"connections\",\n            field=models.ManyToManyField(\n                blank=True, related_name=\"connections\", to=\"KODBURG.requests\"",
        "detail": "KODBURG.migrations.0011_user_connections",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "KODBURG.migrations.0012_remove_requests_onl_from_remove_requests_onl_to",
        "description": "KODBURG.migrations.0012_remove_requests_onl_from_remove_requests_onl_to",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        (\"KODBURG\", \"0011_user_connections\"),\n    ]\n    operations = [\n        migrations.RemoveField(\n            model_name=\"requests\",\n            name=\"onl_from\",\n        ),\n        migrations.RemoveField(",
        "detail": "KODBURG.migrations.0012_remove_requests_onl_from_remove_requests_onl_to",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "KODBURG.migrations.0013_room_mes",
        "description": "KODBURG.migrations.0013_room_mes",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        (\"KODBURG\", \"0012_remove_requests_onl_from_remove_requests_onl_to\"),\n    ]\n    operations = [\n        migrations.AddField(\n            model_name=\"room\",\n            name=\"mes\",\n            field=models.ManyToManyField(\n                blank=True, related_name=\"mes\", to=\"KODBURG.messages\"",
        "detail": "KODBURG.migrations.0013_room_mes",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "KODBURG.migrations.0014_alter_notice_usernamefrom_alter_notice_usernameto",
        "description": "KODBURG.migrations.0014_alter_notice_usernamefrom_alter_notice_usernameto",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        (\"KODBURG\", \"0013_room_mes\"),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name=\"notice\",\n            name=\"usernameFrom\",\n            field=models.ForeignKey(\n                blank=True,",
        "detail": "KODBURG.migrations.0014_alter_notice_usernamefrom_alter_notice_usernameto",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "KODBURG.migrations.0015_alter_messages_user_from",
        "description": "KODBURG.migrations.0015_alter_messages_user_from",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        (\"KODBURG\", \"0014_alter_notice_usernamefrom_alter_notice_usernameto\"),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name=\"messages\",\n            name=\"user_from\",\n            field=models.ForeignKey(\n                blank=True,",
        "detail": "KODBURG.migrations.0015_alter_messages_user_from",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "KODBURG.migrations.0016_user_new_messages",
        "description": "KODBURG.migrations.0016_user_new_messages",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        (\"KODBURG\", \"0015_alter_messages_user_from\"),\n    ]\n    operations = [\n        migrations.AddField(\n            model_name=\"user\",\n            name=\"new_messages\",\n            field=models.BooleanField(blank=True, default=False),\n        ),",
        "detail": "KODBURG.migrations.0016_user_new_messages",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "KODBURG.migrations.0017_user_email_confirm",
        "description": "KODBURG.migrations.0017_user_email_confirm",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        (\"KODBURG\", \"0016_user_new_messages\"),\n    ]\n    operations = [\n        migrations.AddField(\n            model_name=\"user\",\n            name=\"email_confirm\",\n            field=models.BooleanField(blank=True, default=False),\n        ),",
        "detail": "KODBURG.migrations.0017_user_email_confirm",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "KODBURG.migrations.0018_user_email_hash_alter_user_chats_and_more",
        "description": "KODBURG.migrations.0018_user_email_hash_alter_user_chats_and_more",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        (\"KODBURG\", \"0017_user_email_confirm\"),\n    ]\n    operations = [\n        migrations.AddField(\n            model_name=\"user\",\n            name=\"email_hash\",\n            field=models.CharField(max_length=10000, null=True),\n        ),",
        "detail": "KODBURG.migrations.0018_user_email_hash_alter_user_chats_and_more",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "KODBURG.migrations.0019_alter_user_email_hash",
        "description": "KODBURG.migrations.0019_alter_user_email_hash",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        (\"KODBURG\", \"0018_user_email_hash_alter_user_chats_and_more\"),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name=\"user\",\n            name=\"email_hash\",\n            field=models.CharField(blank=True, default=\"\", max_length=10000, null=True),\n        ),",
        "detail": "KODBURG.migrations.0019_alter_user_email_hash",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "KODBURG.migrations.0020_user_password_hash",
        "description": "KODBURG.migrations.0020_user_password_hash",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        (\"KODBURG\", \"0019_alter_user_email_hash\"),\n    ]\n    operations = [\n        migrations.AddField(\n            model_name=\"user\",\n            name=\"password_hash\",\n            field=models.CharField(blank=True, default=\"\", max_length=10000, null=True),\n        ),",
        "detail": "KODBURG.migrations.0020_user_password_hash",
        "documentation": {}
    },
    {
        "label": "KodburgConfig",
        "kind": 6,
        "importPath": "KODBURG.apps",
        "description": "KODBURG.apps",
        "peekOfCode": "class KodburgConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'KODBURG'",
        "detail": "KODBURG.apps",
        "documentation": {}
    },
    {
        "label": "MyWebConsumer",
        "kind": 6,
        "importPath": "KODBURG.consumer",
        "description": "KODBURG.consumer",
        "peekOfCode": "class MyWebConsumer(AsyncWebsocketConsumer):\n    @database_sync_to_async\n    def find_newNotice(self, user):\n        return len(Notice.objects.filter(usernameTo=user, read=False))\n    @database_sync_to_async\n    def created1(self, from_user, to_user):\n        return len(Friends_request.objects.filter(from_user=from_user, to_user=to_user))\n    @database_sync_to_async\n    def created2(self, to_user, from_user):\n        return len(Friends_request.objects.filter(from_user=from_user, to_user=to_user))",
        "detail": "KODBURG.consumer",
        "documentation": {}
    },
    {
        "label": "UserCreateForm",
        "kind": 6,
        "importPath": "KODBURG.forms",
        "description": "KODBURG.forms",
        "peekOfCode": "class UserCreateForm(UserCreationForm):\n    username = CharField(\n        label=\"Введите свой nickname\",\n        max_length=255,\n        widget=TextInput(\n            attrs={\n                \"class\": \"input-class col-xxl-3 col-lg-5 col-md-8 col-sm-12\",\n                \"placeholder\": \"nickname\",\n            }\n        ),",
        "detail": "KODBURG.forms",
        "documentation": {}
    },
    {
        "label": "UserLoginForm",
        "kind": 6,
        "importPath": "KODBURG.forms",
        "description": "KODBURG.forms",
        "peekOfCode": "class UserLoginForm(AuthenticationForm):\n    username = CharField(\n        label=\"Введите свой nickname\",\n        max_length=255,\n        widget=TextInput(\n            attrs={\n                \"class\": \"input-class col-xxl-3 col-lg-5 col-md-8 col-sm-12\",\n                \"placeholder\": \"nickname\",\n            }\n        ),",
        "detail": "KODBURG.forms",
        "documentation": {}
    },
    {
        "label": "UserForm",
        "kind": 6,
        "importPath": "KODBURG.forms",
        "description": "KODBURG.forms",
        "peekOfCode": "class UserForm(ModelForm):\n    class Meta:\n        model = User\n        fields = [\"username\", \"email\", \"first_name\", \"last_name\", \"image\", \"bio\"]\n        widgets = {\n            \"username\": TextInput(\n                attrs={\"class\": \"input-class col-12\", \"placeholder\": \"nickname\"}\n            ),\n            \"email\": TextInput(\n                attrs={",
        "detail": "KODBURG.forms",
        "documentation": {}
    },
    {
        "label": "UserPasswordForm",
        "kind": 6,
        "importPath": "KODBURG.forms",
        "description": "KODBURG.forms",
        "peekOfCode": "class UserPasswordForm(ModelForm):\n    class Meta:\n        model = User\n        fields = [\"password\"]\n        widgets = {\n            \"password\": PasswordInput(\n                attrs={\n                    \"class\": \"input-class col-12\",\n                    \"placeholder\": \"Введите новый пароль\",\n                }",
        "detail": "KODBURG.forms",
        "documentation": {}
    },
    {
        "label": "UserLostForm",
        "kind": 6,
        "importPath": "KODBURG.forms",
        "description": "KODBURG.forms",
        "peekOfCode": "class UserLostForm(ModelForm):\n    username = CharField(\n        label=\"Введите свой username\",\n        max_length=255,\n        widget=TextInput(\n            attrs={\"class\": \"input-class col-12\", \"placeholder\": \"username\"}\n        ),\n    )\n    email = CharField(\n        label=\"Введите свой email\",",
        "detail": "KODBURG.forms",
        "documentation": {}
    },
    {
        "label": "Blog_form",
        "kind": 6,
        "importPath": "KODBURG.forms",
        "description": "KODBURG.forms",
        "peekOfCode": "class Blog_form(ModelForm):\n    class Meta:\n        model = Blog_list\n        fields = [\"title\", \"text\", \"img\", \"username\"]\n        widgets = {\n            \"title\": TextInput(\n                attrs={\n                    \"class\": \"col-12 col-lg-7 h-100\",\n                    \"placeholder\": \"Название поста\",\n                }",
        "detail": "KODBURG.forms",
        "documentation": {}
    },
    {
        "label": "Project_form",
        "kind": 6,
        "importPath": "KODBURG.forms",
        "description": "KODBURG.forms",
        "peekOfCode": "class Project_form(ModelForm):\n    class Meta:\n        model = Project_list\n        fields = [\"title\", \"text\", \"img\", \"file\", \"username\"]\n        widgets = {\n            \"title\": TextInput(\n                attrs={\n                    \"class\": \"col-12 col-lg-7 h-100\",\n                    \"placeholder\": \"Название поста\",\n                }",
        "detail": "KODBURG.forms",
        "documentation": {}
    },
    {
        "label": "Friend_form",
        "kind": 6,
        "importPath": "KODBURG.forms",
        "description": "KODBURG.forms",
        "peekOfCode": "class Friend_form(ModelForm):\n    class Meta:\n        model = Notice\n        fields = [\"usernameFrom\", \"usernameTo\", \"image\", \"text\"]\nclass Comments_to_blog(ModelForm):\n    class Meta:\n        model = Comment_blog\n        fields = [\"blog\", \"author\", \"text\", \"image\"]\n        widgets = {\n            \"text\": Textarea(attrs={\"class\": \"col-12\", \"style\": \"height: 5vh\"}),",
        "detail": "KODBURG.forms",
        "documentation": {}
    },
    {
        "label": "Comments_to_blog",
        "kind": 6,
        "importPath": "KODBURG.forms",
        "description": "KODBURG.forms",
        "peekOfCode": "class Comments_to_blog(ModelForm):\n    class Meta:\n        model = Comment_blog\n        fields = [\"blog\", \"author\", \"text\", \"image\"]\n        widgets = {\n            \"text\": Textarea(attrs={\"class\": \"col-12\", \"style\": \"height: 5vh\"}),\n            \"image\": FileInput(\n                attrs={\n                    \"class\": \"input-class col-12\",\n                }",
        "detail": "KODBURG.forms",
        "documentation": {}
    },
    {
        "label": "Comments_to_projects",
        "kind": 6,
        "importPath": "KODBURG.forms",
        "description": "KODBURG.forms",
        "peekOfCode": "class Comments_to_projects(ModelForm):\n    class Meta:\n        model = Comment_project\n        fields = [\"project\", \"author\", \"text\", \"image\"]\n        widgets = {\n            \"text\": Textarea(attrs={\"class\": \"col-12\", \"style\": \"height: 5vh\"}),\n            \"image\": FileInput(\n                attrs={\n                    \"class\": \"input-class col-12\",\n                }",
        "detail": "KODBURG.forms",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 6,
        "importPath": "KODBURG.models",
        "description": "KODBURG.models",
        "peekOfCode": "class User(AbstractUser):\n    image = models.ImageField(upload_to=\"User/photo\", default=\"kodburg/enter.png\")\n    bio = models.TextField(verbose_name=\"Биография\")\n    friends = models.ManyToManyField(\"User\", blank=True, verbose_name=\"Друзья\")\n    notice = models.ManyToManyField(\"Notice\", blank=True, verbose_name=\"Уведомления\")\n    descriptions = models.ManyToManyField(\"User\", blank=True, related_name=\"Descriptions\", verbose_name=\"Подписки\")\n    chats = models.ManyToManyField(\"Room\", blank=True, verbose_name=\"Переписки\")\n    connections = models.ManyToManyField(\"Requests\", blank=True, related_name=\"connections\", verbose_name=\"Связи\")\n    new_messages = models.BooleanField(blank=True, default=False)\n    email_hash = models.CharField(max_length=10000, null=True, blank=True, default=\"\")",
        "detail": "KODBURG.models",
        "documentation": {}
    },
    {
        "label": "Blog_list",
        "kind": 6,
        "importPath": "KODBURG.models",
        "description": "KODBURG.models",
        "peekOfCode": "class Blog_list(models.Model):\n    title = models.CharField(max_length=255)\n    img = models.ImageField(upload_to=\"User/blog\",\n                            default=\"User/blog/enter.png\")\n    text = models.TextField()\n    date = models.DateTimeField(auto_now=True)\n    like = models.ManyToManyField(User, blank=True, related_name=\"like_blog\")\n    dislike = models.ManyToManyField(User, blank=True, related_name=\"dislike_blog\")\n    username = models.ForeignKey(\n        User, on_delete=models.CASCADE, null=True, blank=True)",
        "detail": "KODBURG.models",
        "documentation": {}
    },
    {
        "label": "Project_list",
        "kind": 6,
        "importPath": "KODBURG.models",
        "description": "KODBURG.models",
        "peekOfCode": "class Project_list(models.Model):\n    title = models.CharField(max_length=255)\n    img = models.ImageField(upload_to=\"User/projects/img\",\n                            default=\"User/blog/enter.png\")\n    file = models.FileField(upload_to=\"User/projects/files\")\n    text = models.TextField()\n    date = models.DateTimeField(auto_now=True)\n    like = models.ManyToManyField(User, blank=True, related_name=\"like_project\")\n    dislike = models.ManyToManyField(User, blank=True, related_name=\"dislike_project\")\n    username = models.ForeignKey(User, on_delete=models.CASCADE, null=True, blank=True)",
        "detail": "KODBURG.models",
        "documentation": {}
    },
    {
        "label": "Notice",
        "kind": 6,
        "importPath": "KODBURG.models",
        "description": "KODBURG.models",
        "peekOfCode": "class Notice(models.Model):\n    usernameFrom = models.ForeignKey(\n        User, related_name=\"usernameFrom\", on_delete=models.CASCADE, null=True, blank=True)\n    usernameTo = models.ForeignKey(\n        User, related_name=\"usernameTo\", on_delete=models.CASCADE, null=True, blank=True)\n    image = models.ImageField(upload_to=\"User/photo\", default=\"img/enter.png\")\n    text = models.TextField()\n    read = models.BooleanField(default=False)\n    date = models.DateTimeField(auto_now_add=True)\n    def __str__(self):",
        "detail": "KODBURG.models",
        "documentation": {}
    },
    {
        "label": "Friends_request",
        "kind": 6,
        "importPath": "KODBURG.models",
        "description": "KODBURG.models",
        "peekOfCode": "class Friends_request(models.Model):\n    from_user = models.ForeignKey(\n        User, related_name=\"from_user\", on_delete=models.CASCADE)\n    to_user = models.ForeignKey(\n        User, related_name=\"to_user\", on_delete=models.CASCADE)\n    def __str__(self):\n        return f\"{self.from_user.username}_{self.to_user.username}\"\nclass Comment_blog(models.Model):\n    blog = models.ForeignKey(Blog_list, on_delete=models.CASCADE, null=True, blank=True)\n    image = models.ImageField(upload_to=\"other_img\", default=\"img/enter.png\")",
        "detail": "KODBURG.models",
        "documentation": {}
    },
    {
        "label": "Comment_blog",
        "kind": 6,
        "importPath": "KODBURG.models",
        "description": "KODBURG.models",
        "peekOfCode": "class Comment_blog(models.Model):\n    blog = models.ForeignKey(Blog_list, on_delete=models.CASCADE, null=True, blank=True)\n    image = models.ImageField(upload_to=\"other_img\", default=\"img/enter.png\")\n    text = models.TextField()\n    publishing = models.DateTimeField(auto_now=True)\n    author = models.ForeignKey(User, on_delete=models.CASCADE, blank=True, null=True)\n    date = models.DateTimeField(auto_now=True)\nclass Comment_project(models.Model):\n    project = models.ForeignKey(Project_list, on_delete=models.CASCADE, null=True, blank=True)\n    image = models.ImageField(upload_to=\"other_img\", default=\"img/enter.png\")",
        "detail": "KODBURG.models",
        "documentation": {}
    },
    {
        "label": "Comment_project",
        "kind": 6,
        "importPath": "KODBURG.models",
        "description": "KODBURG.models",
        "peekOfCode": "class Comment_project(models.Model):\n    project = models.ForeignKey(Project_list, on_delete=models.CASCADE, null=True, blank=True)\n    image = models.ImageField(upload_to=\"other_img\", default=\"img/enter.png\")\n    text = models.TextField()\n    publishing = models.DateTimeField(auto_now=True)\n    author = models.ForeignKey(User, on_delete=models.CASCADE, blank=True, null=True)\n    date = models.DateTimeField(auto_now=True)\nclass Room(models.Model):\n    title = models.CharField(max_length=255)\n    time_create = models.DateTimeField(auto_now=True)",
        "detail": "KODBURG.models",
        "documentation": {}
    },
    {
        "label": "Room",
        "kind": 6,
        "importPath": "KODBURG.models",
        "description": "KODBURG.models",
        "peekOfCode": "class Room(models.Model):\n    title = models.CharField(max_length=255)\n    time_create = models.DateTimeField(auto_now=True)\n    mes = models.ManyToManyField(\"Messages\", related_name=\"mes\", blank=True)\n    def __str__(self) -> str:\n        return self.title\nclass Messages(models.Model):\n    user_from = models.ForeignKey(\n        User, on_delete=models.CASCADE, null=True, blank=True, related_name=\"user_from\")\n    message = models.CharField(max_length=255)",
        "detail": "KODBURG.models",
        "documentation": {}
    },
    {
        "label": "Messages",
        "kind": 6,
        "importPath": "KODBURG.models",
        "description": "KODBURG.models",
        "peekOfCode": "class Messages(models.Model):\n    user_from = models.ForeignKey(\n        User, on_delete=models.CASCADE, null=True, blank=True, related_name=\"user_from\")\n    message = models.CharField(max_length=255)\n    viewed = models.BooleanField(default=False)\n    time_send = models.DateTimeField(auto_now=True)\n    room = models.ForeignKey(\"Room\", on_delete=models.CASCADE, null=True, blank=True)\n    def __str__(self):\n        return self.message\nclass Requests(models.Model):",
        "detail": "KODBURG.models",
        "documentation": {}
    },
    {
        "label": "Requests",
        "kind": 6,
        "importPath": "KODBURG.models",
        "description": "KODBURG.models",
        "peekOfCode": "class Requests(models.Model):\n    user_from = models.ForeignKey(User, on_delete=models.CASCADE, null=True, blank=True, related_name=\"user_fromReq\")\n    user_to = models.ForeignKey(User, on_delete=models.CASCADE, null=True, blank=True, related_name=\"user_toReq\")\n    def __str__(self):\n        return f\"{self.user_from.username}.web.{self.user_to.username}\"\nclass Post(models.Model):\n    title = models.TextField()\n    image = models.ImageField(upload_to=\"kodburg/\")\n    def __str__(self) -> str:\n        return self.title",
        "detail": "KODBURG.models",
        "documentation": {}
    },
    {
        "label": "Post",
        "kind": 6,
        "importPath": "KODBURG.models",
        "description": "KODBURG.models",
        "peekOfCode": "class Post(models.Model):\n    title = models.TextField()\n    image = models.ImageField(upload_to=\"kodburg/\")\n    def __str__(self) -> str:\n        return self.title",
        "detail": "KODBURG.models",
        "documentation": {}
    },
    {
        "label": "websocket_urlpatterns",
        "kind": 5,
        "importPath": "KODBURG.routing",
        "description": "KODBURG.routing",
        "peekOfCode": "websocket_urlpatterns = [\n    path(\"ws/ac/<str:room_name>/\", consumer.MyWebConsumer.as_asgi()),\n]",
        "detail": "KODBURG.routing",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "KODBURG.urls",
        "description": "KODBURG.urls",
        "peekOfCode": "urlpatterns = [\n    path('', views.Welcome.as_view(), name=\"welcome\"),\n    path('enter/', views.Enter.as_view(), name=\"enter\"),\n    path('profile/', views.update_profile, name=\"profile\"),\n    path('exit/', views.LogoutView.as_view(template_name=\"KODBURG/welcomeBack.html\"), name=\"exit\"),\n    path('email_confirm/<str:email_hash>/<str:username>/', views.emailConfirm, name=\"email_confirm\"),\n    path('email_send_confirm/<str:email>/', views.email_send_confirm, name=\"email_send_confirm\"),\n    path('password_change/<str:password_hash>/<str:username>/', views.passwordChange, name=\"password_change\"),\n    path('password_change_confirm/<str:email>/', views.password_send_change, name=\"password_change_confirm\"),\n    path('lost_user/', views.search_lost_user, name=\"search_lost_user\"),",
        "detail": "KODBURG.urls",
        "documentation": {}
    },
    {
        "label": "Welcome",
        "kind": 6,
        "importPath": "KODBURG.views",
        "description": "KODBURG.views",
        "peekOfCode": "class Welcome(CreateView):\n    form_class = UserCreateForm\n    template_name = \"KODBURG/welcome.html\"\n    success_url = reverse_lazy(\"enter\")\n    def get_context_data(self, **kwargs):\n        context = super().get_context_data(**kwargs)\n        context[\"object_list\"] = Post.objects.all()\n        return context\nclass Enter(LoginView):\n    template_name = \"KODBURG/enter.html\"",
        "detail": "KODBURG.views",
        "documentation": {}
    },
    {
        "label": "Enter",
        "kind": 6,
        "importPath": "KODBURG.views",
        "description": "KODBURG.views",
        "peekOfCode": "class Enter(LoginView):\n    template_name = \"KODBURG/enter.html\"\n    form_class = UserLoginForm\n    success_url = \"/main_blog\"\ndef main_blog(request):\n    form_blog = Comments_to_blog()\n    if request.method == \"POST\":\n        form_blog = Comments_to_blog(request.POST, request.FILES)\n        if form_blog.is_valid():\n            form_blog = form_blog.save(commit=False)",
        "detail": "KODBURG.views",
        "documentation": {}
    },
    {
        "label": "My_friends",
        "kind": 6,
        "importPath": "KODBURG.views",
        "description": "KODBURG.views",
        "peekOfCode": "class My_friends(TemplateView):\n    template_name = \"KODBURG/my_friends.html\"\nclass My_notice(TemplateView):\n    template_name = \"KODBURG/my_notice.html\"\nclass My_descriptions(TemplateView):\n    template_name = \"KODBURG/my_descriptions.html\"\n@login_required\ndef update_profile(request):\n    error = \"\"\n    email_now = request.user.email",
        "detail": "KODBURG.views",
        "documentation": {}
    },
    {
        "label": "My_notice",
        "kind": 6,
        "importPath": "KODBURG.views",
        "description": "KODBURG.views",
        "peekOfCode": "class My_notice(TemplateView):\n    template_name = \"KODBURG/my_notice.html\"\nclass My_descriptions(TemplateView):\n    template_name = \"KODBURG/my_descriptions.html\"\n@login_required\ndef update_profile(request):\n    error = \"\"\n    email_now = request.user.email\n    if request.method == \"POST\":\n        user_form = UserForm(request.POST, request.FILES, instance=request.user)",
        "detail": "KODBURG.views",
        "documentation": {}
    },
    {
        "label": "My_descriptions",
        "kind": 6,
        "importPath": "KODBURG.views",
        "description": "KODBURG.views",
        "peekOfCode": "class My_descriptions(TemplateView):\n    template_name = \"KODBURG/my_descriptions.html\"\n@login_required\ndef update_profile(request):\n    error = \"\"\n    email_now = request.user.email\n    if request.method == \"POST\":\n        user_form = UserForm(request.POST, request.FILES, instance=request.user)\n        if user_form.is_valid():\n            print(email_now, user_form.data[\"email\"])",
        "detail": "KODBURG.views",
        "documentation": {}
    },
    {
        "label": "Update_blog",
        "kind": 6,
        "importPath": "KODBURG.views",
        "description": "KODBURG.views",
        "peekOfCode": "class Update_blog(UpdateView):\n    model = Blog_list\n    form_class = Blog_form\n    template_name = \"KODBURG/change_blog.html\"\n    success_url = reverse_lazy(\"my_blog\")\n    def get_context_data(self, **kwargs):\n        context = super().get_context_data(**kwargs)\n        context[\"notice\"] = Notice.objects.filter(\n            usernameTo=self.request.user\n        ).order_by(\"-date\")[:3]",
        "detail": "KODBURG.views",
        "documentation": {}
    },
    {
        "label": "Delete_blog",
        "kind": 6,
        "importPath": "KODBURG.views",
        "description": "KODBURG.views",
        "peekOfCode": "class Delete_blog(DeleteView):\n    model = Blog_list\n    context_object_name = \"Blog_list\"\n    template_name = \"KODBURG/delete_blog.html\"\n    success_url = reverse_lazy(\"my_blog\")\n    def get_context_data(self, **kwargs):\n        context = super().get_context_data(**kwargs)\n        context[\"notice\"] = Notice.objects.filter(\n            usernameTo=self.request.user\n        ).order_by(\"-date\")[:3]",
        "detail": "KODBURG.views",
        "documentation": {}
    },
    {
        "label": "Update_project",
        "kind": 6,
        "importPath": "KODBURG.views",
        "description": "KODBURG.views",
        "peekOfCode": "class Update_project(UpdateView):\n    model = Project_list\n    form_class = Project_form\n    template_name = \"KODBURG/change_project.html\"\n    success_url = reverse_lazy(\"my_projects\")\n    def get_context_data(self, **kwargs):\n        error = \"\"\n        context = super().get_context_data(**kwargs)\n        context[\"notice\"] = Notice.objects.filter(\n            usernameTo=self.request.user",
        "detail": "KODBURG.views",
        "documentation": {}
    },
    {
        "label": "Delete_project",
        "kind": 6,
        "importPath": "KODBURG.views",
        "description": "KODBURG.views",
        "peekOfCode": "class Delete_project(DeleteView):\n    model = Project_list\n    context_object_name = \"Project_list\"\n    template_name = \"KODBURG/delete_project.html\"\n    success_url = \"/main/my_projects\"\n    def get_context_data(self, **kwargs):\n        context = super().get_context_data(**kwargs)\n        context[\"notice\"] = Notice.objects.filter(\n            usernameTo=self.request.user\n        ).order_by(\"date\")[:3]",
        "detail": "KODBURG.views",
        "documentation": {}
    },
    {
        "label": "Search",
        "kind": 6,
        "importPath": "KODBURG.views",
        "description": "KODBURG.views",
        "peekOfCode": "class Search(ListView):\n    model = User\n    template_name = \"KODBURG/search.html\"\n    def get_context_data(self, **kwargs):\n        context = super().get_context_data(**kwargs)\n        context[\"notice\"] = Notice.objects.filter(\n            usernameTo=self.request.user\n        ).order_by(\"-date\")[:3]\n        context[\"Users\"] = User.objects.all()\n        context[\"friends\"] = self.request.user.friends",
        "detail": "KODBURG.views",
        "documentation": {}
    },
    {
        "label": "main_blog",
        "kind": 2,
        "importPath": "KODBURG.views",
        "description": "KODBURG.views",
        "peekOfCode": "def main_blog(request):\n    form_blog = Comments_to_blog()\n    if request.method == \"POST\":\n        form_blog = Comments_to_blog(request.POST, request.FILES)\n        if form_blog.is_valid():\n            form_blog = form_blog.save(commit=False)\n            form_blog.author = request.user\n            form_blog.save()\n            return redirect(\"main_blog\")\n    return render(",
        "detail": "KODBURG.views",
        "documentation": {}
    },
    {
        "label": "main_project",
        "kind": 2,
        "importPath": "KODBURG.views",
        "description": "KODBURG.views",
        "peekOfCode": "def main_project(request):\n    form_project = Comments_to_projects()\n    if request.method == \"POST\":\n        form_project = Comments_to_projects(request.POST, request.FILES)\n        if form_project.is_valid():\n            form_project = form_project.save(commit=False)\n            form_project.author = request.user\n            form_project.save()\n            return redirect(\"main_project\")\n    return render(",
        "detail": "KODBURG.views",
        "documentation": {}
    },
    {
        "label": "blog_details",
        "kind": 2,
        "importPath": "KODBURG.views",
        "description": "KODBURG.views",
        "peekOfCode": "def blog_details(request, id):\n    if len(Blog_list.objects.filter(id=id)) == 0:\n        return redirect(request.META.get(\"HTTP_REFERER\"))\n    blog = Blog_list.objects.get(id=id)\n    comments = Comment_blog.objects.filter(blog=blog)\n    print(comments)\n    comments_form = Comments_to_blog()\n    if request.method == \"POST\":\n        comments_form = Comments_to_blog(request.POST, request.FILES)\n        if comments_form.is_valid():",
        "detail": "KODBURG.views",
        "documentation": {}
    },
    {
        "label": "project_details",
        "kind": 2,
        "importPath": "KODBURG.views",
        "description": "KODBURG.views",
        "peekOfCode": "def project_details(request, id):\n    if len(Project_list.objects.filter(id=id)) == 0:\n        return redirect(request.META.get(\"HTTP_REFERER\"))\n    project = Project_list.objects.get(id=id)\n    comments = Comment_project.objects.filter(project=project)\n    comments_form = Comments_to_projects()\n    if request.method == \"POST\":\n        comments_form = Comments_to_projects(request.POST, request.FILES)\n        if comments_form.is_valid():\n            comments_form = comments_form.save(commit=False)",
        "detail": "KODBURG.views",
        "documentation": {}
    },
    {
        "label": "update_profile",
        "kind": 2,
        "importPath": "KODBURG.views",
        "description": "KODBURG.views",
        "peekOfCode": "def update_profile(request):\n    error = \"\"\n    email_now = request.user.email\n    if request.method == \"POST\":\n        user_form = UserForm(request.POST, request.FILES, instance=request.user)\n        if user_form.is_valid():\n            print(email_now, user_form.data[\"email\"])\n            user_form.save()\n            if user_form.data[\"email\"] != email_now:\n                User.objects.filter(id=request.user.id).update(email_confirm=False)",
        "detail": "KODBURG.views",
        "documentation": {}
    },
    {
        "label": "email_send_confirm",
        "kind": 2,
        "importPath": "KODBURG.views",
        "description": "KODBURG.views",
        "peekOfCode": "def email_send_confirm(request, email):\n    email_hash = make_password(email)\n    while \"/\" in email_hash:\n        email_hash = make_password(email)\n    print(email_hash)\n    User.objects.filter(id=request.user.id).update(email_hash=email_hash)\n    try:\n        email = EmailMessage(\n            \"Подтверждение email\",\n            f\"\"\"",
        "detail": "KODBURG.views",
        "documentation": {}
    },
    {
        "label": "emailConfirm",
        "kind": 2,
        "importPath": "KODBURG.views",
        "description": "KODBURG.views",
        "peekOfCode": "def emailConfirm(request, email_hash, username):\n    if not request.user.is_authenticated:\n        user = authenticate(username=username)\n        if user is not None:\n            login(request, user)\n    if request.user.email_hash == email_hash and request.user.email_hash != \"\":\n            User.objects.filter(id=request.user.id).update(email_confirm=True)\n            User.objects.filter(id=request.user.id).update(email_hash=\"\")\n            return render(request, \"KODBURG/email_confirm.html\")\n@login_required",
        "detail": "KODBURG.views",
        "documentation": {}
    },
    {
        "label": "password_send_change",
        "kind": 2,
        "importPath": "KODBURG.views",
        "description": "KODBURG.views",
        "peekOfCode": "def password_send_change(request, email):\n    password_hash = make_password(email)\n    while \"/\" in password_hash:\n        password_hash = make_password(email)\n    print(password_hash)\n    User.objects.filter(id=request.user.id).update(password_hash=password_hash)\n    try:\n        email = EmailMessage(\n            \"Подтверждение email\",\n            f\"\"\"",
        "detail": "KODBURG.views",
        "documentation": {}
    },
    {
        "label": "passwordChange",
        "kind": 2,
        "importPath": "KODBURG.views",
        "description": "KODBURG.views",
        "peekOfCode": "def passwordChange(request, password_hash, username):\n    if not request.user.is_authenticated:\n        user = User.objects.filter(username = username)\n        print(len(user))\n        if len(user) != 0:\n            print(2)\n            login(request, user[0])\n    print(3)\n    if request.user.password_hash == password_hash and request.user.password_hash != \"\":\n        error = \"\"",
        "detail": "KODBURG.views",
        "documentation": {}
    },
    {
        "label": "search_lost_user",
        "kind": 2,
        "importPath": "KODBURG.views",
        "description": "KODBURG.views",
        "peekOfCode": "def search_lost_user(request):\n    error = \"\"\n    user = \"\"\n    form = UserLostForm()\n    if request.method == \"POST\":\n        form = UserLostForm(request.POST)\n        username = form.data[\"username\"]\n        email = form.data[\"email\"]\n        if username != \"\" and email != \"\":\n            user = User.objects.filter(username=username, email=email)",
        "detail": "KODBURG.views",
        "documentation": {}
    },
    {
        "label": "my_blog",
        "kind": 2,
        "importPath": "KODBURG.views",
        "description": "KODBURG.views",
        "peekOfCode": "def my_blog(request):\n    form = Comments_to_blog()\n    if request.method == \"POST\":\n        form = Comments_to_blog(request.POST, request.FILES)\n        if form.is_valid:\n            form = form.save(commit=False)\n            form.author = request.user\n            form.save()\n            return redirect(\"my_blog\")\n    return render(",
        "detail": "KODBURG.views",
        "documentation": {}
    },
    {
        "label": "add_blog",
        "kind": 2,
        "importPath": "KODBURG.views",
        "description": "KODBURG.views",
        "peekOfCode": "def add_blog(request):\n    error = \"\"\n    form = Blog_form()\n    if request.method == \"POST\":\n        form = Blog_form(request.POST, request.FILES)\n        if form.is_valid():\n            form = form.save(commit=False)\n            form.username = request.user\n            form.save()\n            return redirect(\"my_blog\")",
        "detail": "KODBURG.views",
        "documentation": {}
    },
    {
        "label": "my_project",
        "kind": 2,
        "importPath": "KODBURG.views",
        "description": "KODBURG.views",
        "peekOfCode": "def my_project(request):\n    form = Comments_to_projects()\n    if request.method == \"POST\":\n        form = Comments_to_projects(request.POST, request.FILES)\n        if form.is_valid:\n            form = form.save(commit=False)\n            form.author = request.user\n            form.save()\n            return redirect(\"my_projects\")\n    return render(",
        "detail": "KODBURG.views",
        "documentation": {}
    },
    {
        "label": "add_project",
        "kind": 2,
        "importPath": "KODBURG.views",
        "description": "KODBURG.views",
        "peekOfCode": "def add_project(request):\n    error = \"\"\n    form = Project_form()\n    if request.method == \"POST\":\n        form = Project_form(request.POST, request.FILES)\n        if form.is_valid:\n            form = form.save(commit=False)\n            form.username = request.user\n            form.save()\n            return redirect(\"my_projects\")",
        "detail": "KODBURG.views",
        "documentation": {}
    },
    {
        "label": "other_user",
        "kind": 2,
        "importPath": "KODBURG.views",
        "description": "KODBURG.views",
        "peekOfCode": "def other_user(request, username, userID):\n    from_user = request.user\n    to_user = User.objects.get(id=userID)\n    object = Notice.objects.filter(usernameFrom=to_user, usernameTo=from_user)\n    connection_from = Requests.objects.filter(user_from=from_user, user_to=to_user)\n    connections_to = Requests.objects.filter(user_from=to_user, user_to=from_user)\n    # smptObj = smtplib.SMTP('localhost')\n    # smptObj.starttls()\n    # smptObj.sendmail(\"egorkultinn@mail.ru\", \"yegor.kultin@bk.ru\", \"Hello, world!\")\n    # smptObj.quit()",
        "detail": "KODBURG.views",
        "documentation": {}
    },
    {
        "label": "chat",
        "kind": 2,
        "importPath": "KODBURG.views",
        "description": "KODBURG.views",
        "peekOfCode": "def chat(request, user_from, user_to):\n    my_id = request.user.pk\n    print(user_from, user_to)\n    user1 = User.objects.get(pk=user_from)\n    user2 = User.objects.get(pk=user_to)\n    print(f\"{user1.username}.{user2.username}\")\n    if Messages.objects.filter(\n        room=Room.objects.get(title=f\"{user1.username}.{user2.username}\"), viewed=False\n    ).first:\n        non_viewed = Messages.objects.filter(",
        "detail": "KODBURG.views",
        "documentation": {}
    },
    {
        "label": "create_chat",
        "kind": 2,
        "importPath": "KODBURG.views",
        "description": "KODBURG.views",
        "peekOfCode": "def create_chat(request, user_from, user_to):\n    user1 = User.objects.get(pk=user_from)\n    user2 = User.objects.get(pk=user_to)\n    if Room.objects.filter(title=f\"{user1.username}.{user2.username}\"):\n        return redirect(f\"/main/chat/{user_from}{user_to}/\")\n    elif Room.objects.filter(title=f\"{user2.username}.{user1.username}\"):\n        return redirect(f\"/main/chat/{user_to}{user_from}/\")\n    else:\n        Room.objects.create(title=f\"{user1.username}.{user2.username}\")\n        new_room = Room.objects.get(title=f\"{user1.username}.{user2.username}\")",
        "detail": "KODBURG.views",
        "documentation": {}
    },
    {
        "label": "messager",
        "kind": 2,
        "importPath": "KODBURG.views",
        "description": "KODBURG.views",
        "peekOfCode": "def messager(request):\n    Users = User.objects.all()\n    rooms = Room.objects.all().order_by(\"time_create\")\n    notice = Notice.objects.filter(usernameTo=request.user).order_by(\"-date\")[:3]\n    list = {}\n    for i in rooms:\n        if request.user.username in i.title:\n            print(i.title)\n            if len(Messages.objects.filter(room=i)) > 0:\n                print(\">0\")",
        "detail": "KODBURG.views",
        "documentation": {}
    },
    {
        "label": "application",
        "kind": 5,
        "importPath": "main.asgi",
        "description": "main.asgi",
        "peekOfCode": "application = ProtocolTypeRouter({\n    \"http\": get_asgi_application(),\n    \"websocket\": AuthMiddlewareStack(\n        URLRouter(websocket_urlpatterns)\n        )\n    })",
        "detail": "main.asgi",
        "documentation": {}
    },
    {
        "label": "BASE_DIR",
        "kind": 5,
        "importPath": "main.settings",
        "description": "main.settings",
        "peekOfCode": "BASE_DIR = Path(__file__).resolve().parent.parent\n# Quick-start development settings - unsuitable for production\n# See https://docs.djangoproject.com/en/4.1/howto/deployment/checklist/\n# SECURITY WARNING: keep the secret key used in production secret!\nSECRET_KEY = 'SECRET_KEY'\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\nALLOWED_HOSTS = []\nMEDIA_URL = '/media/'\nMEDIA_ROOT = os.path.join(BASE_DIR, 'media')",
        "detail": "main.settings",
        "documentation": {}
    },
    {
        "label": "SECRET_KEY",
        "kind": 5,
        "importPath": "main.settings",
        "description": "main.settings",
        "peekOfCode": "SECRET_KEY = 'SECRET_KEY'\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\nALLOWED_HOSTS = []\nMEDIA_URL = '/media/'\nMEDIA_ROOT = os.path.join(BASE_DIR, 'media')\nLOGIN_URL = \"/enter\"\nLOGIN_REDIRECT_URL = '/main_blog'\nMESSAGE_STORAGE = 'django.contrib.messages.storage.cookie.CookieStorage'\nSTATICFILES_DIRS = [",
        "detail": "main.settings",
        "documentation": {}
    },
    {
        "label": "DEBUG",
        "kind": 5,
        "importPath": "main.settings",
        "description": "main.settings",
        "peekOfCode": "DEBUG = True\nALLOWED_HOSTS = []\nMEDIA_URL = '/media/'\nMEDIA_ROOT = os.path.join(BASE_DIR, 'media')\nLOGIN_URL = \"/enter\"\nLOGIN_REDIRECT_URL = '/main_blog'\nMESSAGE_STORAGE = 'django.contrib.messages.storage.cookie.CookieStorage'\nSTATICFILES_DIRS = [\n    os.path.join(MEDIA_ROOT, \"User\")\n]",
        "detail": "main.settings",
        "documentation": {}
    },
    {
        "label": "ALLOWED_HOSTS",
        "kind": 5,
        "importPath": "main.settings",
        "description": "main.settings",
        "peekOfCode": "ALLOWED_HOSTS = []\nMEDIA_URL = '/media/'\nMEDIA_ROOT = os.path.join(BASE_DIR, 'media')\nLOGIN_URL = \"/enter\"\nLOGIN_REDIRECT_URL = '/main_blog'\nMESSAGE_STORAGE = 'django.contrib.messages.storage.cookie.CookieStorage'\nSTATICFILES_DIRS = [\n    os.path.join(MEDIA_ROOT, \"User\")\n]\nAUTH_USER_MODEL = 'KODBURG.User'",
        "detail": "main.settings",
        "documentation": {}
    },
    {
        "label": "MEDIA_URL",
        "kind": 5,
        "importPath": "main.settings",
        "description": "main.settings",
        "peekOfCode": "MEDIA_URL = '/media/'\nMEDIA_ROOT = os.path.join(BASE_DIR, 'media')\nLOGIN_URL = \"/enter\"\nLOGIN_REDIRECT_URL = '/main_blog'\nMESSAGE_STORAGE = 'django.contrib.messages.storage.cookie.CookieStorage'\nSTATICFILES_DIRS = [\n    os.path.join(MEDIA_ROOT, \"User\")\n]\nAUTH_USER_MODEL = 'KODBURG.User'\nEMAIL_HOST = 'smtp.(Домен твоей почты)',",
        "detail": "main.settings",
        "documentation": {}
    },
    {
        "label": "MEDIA_ROOT",
        "kind": 5,
        "importPath": "main.settings",
        "description": "main.settings",
        "peekOfCode": "MEDIA_ROOT = os.path.join(BASE_DIR, 'media')\nLOGIN_URL = \"/enter\"\nLOGIN_REDIRECT_URL = '/main_blog'\nMESSAGE_STORAGE = 'django.contrib.messages.storage.cookie.CookieStorage'\nSTATICFILES_DIRS = [\n    os.path.join(MEDIA_ROOT, \"User\")\n]\nAUTH_USER_MODEL = 'KODBURG.User'\nEMAIL_HOST = 'smtp.(Домен твоей почты)',\nEMAIL_PORT = \"(Порт домена твоей электронной почты)\",",
        "detail": "main.settings",
        "documentation": {}
    },
    {
        "label": "LOGIN_URL",
        "kind": 5,
        "importPath": "main.settings",
        "description": "main.settings",
        "peekOfCode": "LOGIN_URL = \"/enter\"\nLOGIN_REDIRECT_URL = '/main_blog'\nMESSAGE_STORAGE = 'django.contrib.messages.storage.cookie.CookieStorage'\nSTATICFILES_DIRS = [\n    os.path.join(MEDIA_ROOT, \"User\")\n]\nAUTH_USER_MODEL = 'KODBURG.User'\nEMAIL_HOST = 'smtp.(Домен твоей почты)',\nEMAIL_PORT = \"(Порт домена твоей электронной почты)\",\nEMAIL_HOST_USER = \"(Твоя электронная почта)\"",
        "detail": "main.settings",
        "documentation": {}
    },
    {
        "label": "LOGIN_REDIRECT_URL",
        "kind": 5,
        "importPath": "main.settings",
        "description": "main.settings",
        "peekOfCode": "LOGIN_REDIRECT_URL = '/main_blog'\nMESSAGE_STORAGE = 'django.contrib.messages.storage.cookie.CookieStorage'\nSTATICFILES_DIRS = [\n    os.path.join(MEDIA_ROOT, \"User\")\n]\nAUTH_USER_MODEL = 'KODBURG.User'\nEMAIL_HOST = 'smtp.(Домен твоей почты)',\nEMAIL_PORT = \"(Порт домена твоей электронной почты)\",\nEMAIL_HOST_USER = \"(Твоя электронная почта)\"\nDEFAULT_FROM_EMAIL = \"(Твоя электронная почта)\",",
        "detail": "main.settings",
        "documentation": {}
    },
    {
        "label": "MESSAGE_STORAGE",
        "kind": 5,
        "importPath": "main.settings",
        "description": "main.settings",
        "peekOfCode": "MESSAGE_STORAGE = 'django.contrib.messages.storage.cookie.CookieStorage'\nSTATICFILES_DIRS = [\n    os.path.join(MEDIA_ROOT, \"User\")\n]\nAUTH_USER_MODEL = 'KODBURG.User'\nEMAIL_HOST = 'smtp.(Домен твоей почты)',\nEMAIL_PORT = \"(Порт домена твоей электронной почты)\",\nEMAIL_HOST_USER = \"(Твоя электронная почта)\"\nDEFAULT_FROM_EMAIL = \"(Твоя электронная почта)\",\nEMAIL_HOST_PASSWORD = \"(Пароль к твоей электронной почте. Он задается отдельно для каждого приложения)\"",
        "detail": "main.settings",
        "documentation": {}
    },
    {
        "label": "STATICFILES_DIRS",
        "kind": 5,
        "importPath": "main.settings",
        "description": "main.settings",
        "peekOfCode": "STATICFILES_DIRS = [\n    os.path.join(MEDIA_ROOT, \"User\")\n]\nAUTH_USER_MODEL = 'KODBURG.User'\nEMAIL_HOST = 'smtp.(Домен твоей почты)',\nEMAIL_PORT = \"(Порт домена твоей электронной почты)\",\nEMAIL_HOST_USER = \"(Твоя электронная почта)\"\nDEFAULT_FROM_EMAIL = \"(Твоя электронная почта)\",\nEMAIL_HOST_PASSWORD = \"(Пароль к твоей электронной почте. Он задается отдельно для каждого приложения)\"\nEMAIL_USE_TLS = True",
        "detail": "main.settings",
        "documentation": {}
    },
    {
        "label": "AUTH_USER_MODEL",
        "kind": 5,
        "importPath": "main.settings",
        "description": "main.settings",
        "peekOfCode": "AUTH_USER_MODEL = 'KODBURG.User'\nEMAIL_HOST = 'smtp.(Домен твоей почты)',\nEMAIL_PORT = \"(Порт домена твоей электронной почты)\",\nEMAIL_HOST_USER = \"(Твоя электронная почта)\"\nDEFAULT_FROM_EMAIL = \"(Твоя электронная почта)\",\nEMAIL_HOST_PASSWORD = \"(Пароль к твоей электронной почте. Он задается отдельно для каждого приложения)\"\nEMAIL_USE_TLS = True\nEMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'\n# Application definition\nINSTALLED_APPS = [",
        "detail": "main.settings",
        "documentation": {}
    },
    {
        "label": "EMAIL_HOST",
        "kind": 5,
        "importPath": "main.settings",
        "description": "main.settings",
        "peekOfCode": "EMAIL_HOST = 'smtp.(Домен твоей почты)',\nEMAIL_PORT = \"(Порт домена твоей электронной почты)\",\nEMAIL_HOST_USER = \"(Твоя электронная почта)\"\nDEFAULT_FROM_EMAIL = \"(Твоя электронная почта)\",\nEMAIL_HOST_PASSWORD = \"(Пароль к твоей электронной почте. Он задается отдельно для каждого приложения)\"\nEMAIL_USE_TLS = True\nEMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'\n# Application definition\nINSTALLED_APPS = [\n    'daphne',",
        "detail": "main.settings",
        "documentation": {}
    },
    {
        "label": "EMAIL_PORT",
        "kind": 5,
        "importPath": "main.settings",
        "description": "main.settings",
        "peekOfCode": "EMAIL_PORT = \"(Порт домена твоей электронной почты)\",\nEMAIL_HOST_USER = \"(Твоя электронная почта)\"\nDEFAULT_FROM_EMAIL = \"(Твоя электронная почта)\",\nEMAIL_HOST_PASSWORD = \"(Пароль к твоей электронной почте. Он задается отдельно для каждого приложения)\"\nEMAIL_USE_TLS = True\nEMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'\n# Application definition\nINSTALLED_APPS = [\n    'daphne',\n    'django.contrib.admin',",
        "detail": "main.settings",
        "documentation": {}
    },
    {
        "label": "EMAIL_HOST_USER",
        "kind": 5,
        "importPath": "main.settings",
        "description": "main.settings",
        "peekOfCode": "EMAIL_HOST_USER = \"(Твоя электронная почта)\"\nDEFAULT_FROM_EMAIL = \"(Твоя электронная почта)\",\nEMAIL_HOST_PASSWORD = \"(Пароль к твоей электронной почте. Он задается отдельно для каждого приложения)\"\nEMAIL_USE_TLS = True\nEMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'\n# Application definition\nINSTALLED_APPS = [\n    'daphne',\n    'django.contrib.admin',\n    'django.contrib.auth',",
        "detail": "main.settings",
        "documentation": {}
    },
    {
        "label": "DEFAULT_FROM_EMAIL",
        "kind": 5,
        "importPath": "main.settings",
        "description": "main.settings",
        "peekOfCode": "DEFAULT_FROM_EMAIL = \"(Твоя электронная почта)\",\nEMAIL_HOST_PASSWORD = \"(Пароль к твоей электронной почте. Он задается отдельно для каждого приложения)\"\nEMAIL_USE_TLS = True\nEMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'\n# Application definition\nINSTALLED_APPS = [\n    'daphne',\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',",
        "detail": "main.settings",
        "documentation": {}
    },
    {
        "label": "EMAIL_HOST_PASSWORD",
        "kind": 5,
        "importPath": "main.settings",
        "description": "main.settings",
        "peekOfCode": "EMAIL_HOST_PASSWORD = \"(Пароль к твоей электронной почте. Он задается отдельно для каждого приложения)\"\nEMAIL_USE_TLS = True\nEMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'\n# Application definition\nINSTALLED_APPS = [\n    'daphne',\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',",
        "detail": "main.settings",
        "documentation": {}
    },
    {
        "label": "EMAIL_USE_TLS",
        "kind": 5,
        "importPath": "main.settings",
        "description": "main.settings",
        "peekOfCode": "EMAIL_USE_TLS = True\nEMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'\n# Application definition\nINSTALLED_APPS = [\n    'daphne',\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',",
        "detail": "main.settings",
        "documentation": {}
    },
    {
        "label": "EMAIL_BACKEND",
        "kind": 5,
        "importPath": "main.settings",
        "description": "main.settings",
        "peekOfCode": "EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'\n# Application definition\nINSTALLED_APPS = [\n    'daphne',\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',",
        "detail": "main.settings",
        "documentation": {}
    },
    {
        "label": "INSTALLED_APPS",
        "kind": 5,
        "importPath": "main.settings",
        "description": "main.settings",
        "peekOfCode": "INSTALLED_APPS = [\n    'daphne',\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'channels',\n    'KODBURG',",
        "detail": "main.settings",
        "documentation": {}
    },
    {
        "label": "STATICFILES_FINDERS",
        "kind": 5,
        "importPath": "main.settings",
        "description": "main.settings",
        "peekOfCode": "STATICFILES_FINDERS = (\n    'django.contrib.staticfiles.finders.FileSystemFinder',\n    'django.contrib.staticfiles.finders.AppDirectoriesFinder',\n    'compressor.finders.CompressorFinder',\n)\nCHANNEL_LAYERS = {\n    \"default\": {\n        \"BACKEND\": \"channels.layers.InMemoryChannelLayer\"\n    }\n}",
        "detail": "main.settings",
        "documentation": {}
    },
    {
        "label": "CHANNEL_LAYERS",
        "kind": 5,
        "importPath": "main.settings",
        "description": "main.settings",
        "peekOfCode": "CHANNEL_LAYERS = {\n    \"default\": {\n        \"BACKEND\": \"channels.layers.InMemoryChannelLayer\"\n    }\n}\nPASSWORD_HASHERS = (\n    'django.contrib.auth.hashers.BCryptSHA256PasswordHasher',\n    'django.contrib.auth.hashers.BCryptPasswordHasher',\n    'django.contrib.auth.hashers.PBKDF2PasswordHasher',\n    'django.contrib.auth.hashers.PBKDF2SHA1PasswordHasher',",
        "detail": "main.settings",
        "documentation": {}
    },
    {
        "label": "PASSWORD_HASHERS",
        "kind": 5,
        "importPath": "main.settings",
        "description": "main.settings",
        "peekOfCode": "PASSWORD_HASHERS = (\n    'django.contrib.auth.hashers.BCryptSHA256PasswordHasher',\n    'django.contrib.auth.hashers.BCryptPasswordHasher',\n    'django.contrib.auth.hashers.PBKDF2PasswordHasher',\n    'django.contrib.auth.hashers.PBKDF2SHA1PasswordHasher',\n    'django.contrib.auth.hashers.SHA1PasswordHasher',\n    'django.contrib.auth.hashers.MD5PasswordHasher',\n    'django.contrib.auth.hashers.CryptPasswordHasher',\n)\n# CHANNEL_LAYERS = {",
        "detail": "main.settings",
        "documentation": {}
    },
    {
        "label": "MIDDLEWARE",
        "kind": 5,
        "importPath": "main.settings",
        "description": "main.settings",
        "peekOfCode": "MIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\nROOT_URLCONF = 'main.urls'",
        "detail": "main.settings",
        "documentation": {}
    },
    {
        "label": "ROOT_URLCONF",
        "kind": 5,
        "importPath": "main.settings",
        "description": "main.settings",
        "peekOfCode": "ROOT_URLCONF = 'main.urls'\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [os.path.join(BASE_DIR, 'templates')],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',",
        "detail": "main.settings",
        "documentation": {}
    },
    {
        "label": "TEMPLATES",
        "kind": 5,
        "importPath": "main.settings",
        "description": "main.settings",
        "peekOfCode": "TEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [os.path.join(BASE_DIR, 'templates')],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',",
        "detail": "main.settings",
        "documentation": {}
    },
    {
        "label": "WSGI_APPLICATION",
        "kind": 5,
        "importPath": "main.settings",
        "description": "main.settings",
        "peekOfCode": "WSGI_APPLICATION = 'main.wsgi.application'\nASGI_APPLICATION = 'main.asgi.application'\n# Database\n# https://docs.djangoproject.com/en/4.0/ref/settings/#databases\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': BASE_DIR / 'db.sqlite3',\n    }\n}",
        "detail": "main.settings",
        "documentation": {}
    },
    {
        "label": "ASGI_APPLICATION",
        "kind": 5,
        "importPath": "main.settings",
        "description": "main.settings",
        "peekOfCode": "ASGI_APPLICATION = 'main.asgi.application'\n# Database\n# https://docs.djangoproject.com/en/4.0/ref/settings/#databases\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': BASE_DIR / 'db.sqlite3',\n    }\n}\n# Password validation",
        "detail": "main.settings",
        "documentation": {}
    },
    {
        "label": "DATABASES",
        "kind": 5,
        "importPath": "main.settings",
        "description": "main.settings",
        "peekOfCode": "DATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': BASE_DIR / 'db.sqlite3',\n    }\n}\n# Password validation\n# https://docs.djangoproject.com/en/4.0/ref/settings/#auth-password-validators\nAUTH_PASSWORD_VALIDATORS = [\n    {",
        "detail": "main.settings",
        "documentation": {}
    },
    {
        "label": "AUTH_PASSWORD_VALIDATORS",
        "kind": 5,
        "importPath": "main.settings",
        "description": "main.settings",
        "peekOfCode": "AUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },",
        "detail": "main.settings",
        "documentation": {}
    },
    {
        "label": "REST_FRAMEWORK",
        "kind": 5,
        "importPath": "main.settings",
        "description": "main.settings",
        "peekOfCode": "REST_FRAMEWORK = {\n    'DEFAULT_AUTHENTICATION_CLASSES': (\n        'rest_framework_simplejwt.authentication.JWTAuthentication'\n    )\n}\nLANGUAGE_CODE = 'ru'\nTIME_ZONE = 'UTC'\nUSE_I18N = True\nUSE_TZ = True\n# Static files (CSS, JavaScript, Images)",
        "detail": "main.settings",
        "documentation": {}
    },
    {
        "label": "LANGUAGE_CODE",
        "kind": 5,
        "importPath": "main.settings",
        "description": "main.settings",
        "peekOfCode": "LANGUAGE_CODE = 'ru'\nTIME_ZONE = 'UTC'\nUSE_I18N = True\nUSE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/4.0/howto/static-files/\nSTATIC_URL = 'static/'\nSTATIC_ROOT = BASE_DIR / \"main\" / \"KODBURG\" / \"static\"\n# STATICFILES_DIRS = [\n#     BASE_DIR / \"static\",",
        "detail": "main.settings",
        "documentation": {}
    },
    {
        "label": "TIME_ZONE",
        "kind": 5,
        "importPath": "main.settings",
        "description": "main.settings",
        "peekOfCode": "TIME_ZONE = 'UTC'\nUSE_I18N = True\nUSE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/4.0/howto/static-files/\nSTATIC_URL = 'static/'\nSTATIC_ROOT = BASE_DIR / \"main\" / \"KODBURG\" / \"static\"\n# STATICFILES_DIRS = [\n#     BASE_DIR / \"static\",\n# ]",
        "detail": "main.settings",
        "documentation": {}
    },
    {
        "label": "USE_I18N",
        "kind": 5,
        "importPath": "main.settings",
        "description": "main.settings",
        "peekOfCode": "USE_I18N = True\nUSE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/4.0/howto/static-files/\nSTATIC_URL = 'static/'\nSTATIC_ROOT = BASE_DIR / \"main\" / \"KODBURG\" / \"static\"\n# STATICFILES_DIRS = [\n#     BASE_DIR / \"static\",\n# ]\n# Default primary key field type",
        "detail": "main.settings",
        "documentation": {}
    },
    {
        "label": "USE_TZ",
        "kind": 5,
        "importPath": "main.settings",
        "description": "main.settings",
        "peekOfCode": "USE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/4.0/howto/static-files/\nSTATIC_URL = 'static/'\nSTATIC_ROOT = BASE_DIR / \"main\" / \"KODBURG\" / \"static\"\n# STATICFILES_DIRS = [\n#     BASE_DIR / \"static\",\n# ]\n# Default primary key field type\n# https://docs.djangoproject.com/en/4.0/ref/settings/#default-auto-field",
        "detail": "main.settings",
        "documentation": {}
    },
    {
        "label": "STATIC_URL",
        "kind": 5,
        "importPath": "main.settings",
        "description": "main.settings",
        "peekOfCode": "STATIC_URL = 'static/'\nSTATIC_ROOT = BASE_DIR / \"main\" / \"KODBURG\" / \"static\"\n# STATICFILES_DIRS = [\n#     BASE_DIR / \"static\",\n# ]\n# Default primary key field type\n# https://docs.djangoproject.com/en/4.0/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'",
        "detail": "main.settings",
        "documentation": {}
    },
    {
        "label": "STATIC_ROOT",
        "kind": 5,
        "importPath": "main.settings",
        "description": "main.settings",
        "peekOfCode": "STATIC_ROOT = BASE_DIR / \"main\" / \"KODBURG\" / \"static\"\n# STATICFILES_DIRS = [\n#     BASE_DIR / \"static\",\n# ]\n# Default primary key field type\n# https://docs.djangoproject.com/en/4.0/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'",
        "detail": "main.settings",
        "documentation": {}
    },
    {
        "label": "DEFAULT_AUTO_FIELD",
        "kind": 5,
        "importPath": "main.settings",
        "description": "main.settings",
        "peekOfCode": "DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'",
        "detail": "main.settings",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "main.urls",
        "description": "main.urls",
        "peekOfCode": "urlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('KODBURG.urls'))\n] + static(settings.STATIC_URL, document_root=settings.STATIC_ROOT) + static(settings.MEDIA_URL,\n                                                                             document_root=settings.MEDIA_ROOT)",
        "detail": "main.urls",
        "documentation": {}
    },
    {
        "label": "application",
        "kind": 5,
        "importPath": "main.wsgi",
        "description": "main.wsgi",
        "peekOfCode": "application = get_wsgi_application()",
        "detail": "main.wsgi",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "manage",
        "description": "manage",
        "peekOfCode": "def main():\n    \"\"\"Run administrative tasks.\"\"\"\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'main.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\n            \"available on your PYTHONPATH environment variable? Did you \"\n            \"forget to activate a virtual environment?\"",
        "detail": "manage",
        "documentation": {}
    }
]